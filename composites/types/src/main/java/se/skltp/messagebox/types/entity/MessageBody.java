/**
 * Copyright (C) 2013 Inera AB (http://www.inera.se)
 *
 * This file is part of Inera MessageService (http://code.google.com/p/inera-message).
 *
 * Inera MessageService is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Inera MessageService is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package se.skltp.messagebox.types.entity;

import javax.persistence.*;

import se.vgregion.dao.domain.patterns.entity.AbstractEntity;

/**
 * Entity containing the text of the message.
 * <p/>
 * Takes its primary key from its corresponding MessageMeta.
 * <p/>
 * Splitting a message into a body and meta allows us to avoid loading the body except when strictly necessary.
 * <p/>
 * It also allows us to keep the meta-data about a message around longer than the body.
 * <p/>
 * This wraps the content of an incoming web-service call.
 *
 * @author mats.olsson@callistaenterprise.se
 */
@NamedQueries({
        @NamedQuery(name = "MessageBody.getMessageBodies",
                query = "select b from MessageBody b where b.meta.targetSystem = :targetSystem and b.id in (:ids) order by b.id asc"),
        @NamedQuery(name = "MessageBody.deleteMessageBodies",
                query = "delete from MessageBody b where b.id in (select m.id from MessageMeta m where m.targetSystem = :targetSystem and m.id in (:ids) and m.status = :status)")
})

@Entity()
@Table(name = "message_body")
public class MessageBody extends AbstractEntity<Long> {

    @SuppressWarnings("unused")
    private static final long serialVersionUID = 1L;

    // The id is generated by the MessageMeta, we use the same
    @Id
    private Long id;

    @Column(nullable = false)
    @Lob
    private String text;

    @OneToOne(fetch=FetchType.EAGER)
    @PrimaryKeyJoinColumn
    private MessageMeta meta;


    /* Make JPA happy */
    protected MessageBody() {
    }

    public MessageBody(String text) {
        this.text = text;
    }

    public Long getId() {
        return id;
    }

    public MessageMeta getMeta() {
        return meta;
    }

    public String getText() {
        return text;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setMeta(MessageMeta meta) {
        this.meta = meta;
    }
}
